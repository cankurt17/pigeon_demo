// Autogenerated from Pigeon (v9.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

/// Generated class from Pigeon that represents data sent in messages.
struct Book {
  var title: String? = nil
  var author: String? = nil

  static func fromList(_ list: [Any]) -> Book? {
    let title = list[0] as! String? 
    let author = list[1] as! String? 

    return Book(
      title: title,
      author: author
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      author,
    ]
  }
}
private class BookApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Book.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class BookApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Book {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class BookApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return BookApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return BookApiCodecWriter(data: data)
  }
}

class BookApiCodec: FlutterStandardMessageCodec {
  static let shared = BookApiCodec(readerWriter: BookApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol BookApi {
  func search(keyword: String) throws -> [Book?]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class BookApiSetup {
  /// The codec used by BookApi.
  static var codec: FlutterStandardMessageCodec { BookApiCodec.shared }
  /// Sets up an instance of `BookApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: BookApi?) {
    let searchChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BookApi.search", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      searchChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keywordArg = args[0] as! String
        do {
          let result = try api.search(keyword: keywordArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      searchChannel.setMessageHandler(nil)
    }
  }
}
